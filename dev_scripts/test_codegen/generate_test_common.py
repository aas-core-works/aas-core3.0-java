"""Generate the common functions to de/serialize instances of a class."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List
from aas_core_codegen.common import Stripped
from aas_core_codegen.java.common import (
    INDENT as I,
    INDENT2 as II,
    INDENT3 as III,
    INDENT4 as IIII,
    INDENT5 as IIIII,
    INDENT6 as IIIIII,
)

def _generate_find_files()-> Stripped:
    return Stripped(f"""\
public static List<String> findFiles(Path path, String fileExtension) throws IOException {{

{I}if (!Files.isDirectory(path)) {{
{II}throw new IllegalArgumentException("Path must be a directory!");
{I}}}

{I}List<String> result;
{I}try (Stream<Path> walk = Files.walk(path)) {{
{II}result = walk
{III}.filter(p -> !Files.isDirectory(p))
{III}.map(Path::toString)
{III}.filter(f -> f.endsWith(fileExtension))
{III}.collect(Collectors.toList());
{II}}}
{I}return result;
}}""")

def _generate_assert_no_verification_errors()-> Stripped:
    return Stripped(f"""\
public static void assertNoVerificationErrors(List<Reporting.Error> errors, String path){{

{I}if(!errors.isEmpty()){{
{II}StringBuilder stringBuilder = new StringBuilder();
{III}stringBuilder.append("Expected no errors when verifying the instance de-serialized from ")
{III}.append(path).append(", ")
{III}.append("but got ")
{III}.append(errors.size())
{III}.append(" error(s):")
{III}.append(System.lineSeparator());
{II}for(Reporting.Error error : errors){{
{III}stringBuilder.append(Reporting.generateJsonPath(error.getPathSegments()))
{III}.append(": ")
{III}.append(error.getCause());
{II}}}
{II}fail(stringBuilder.toString());
{I}}}
}}""")

def _generate_as_list()-> Stripped:
    return Stripped(f"""\
public static <T> List<T> asList(Iterable<T> iterable) {{
{I}return StreamSupport.stream(iterable.spliterator(), false)
{II}.collect(Collectors.toList());
}}""")

def _generate_assert_equals_expected_or_rerecord_verification_errors()-> Stripped:
    return Stripped(f"""\
public static void assertEqualsExpectedOrRerecordVerificationErrors(List<Reporting.Error> errors, String path) throws IOException {{
{I}if (errors.isEmpty()) {{
{II}fail("Expected at least one verification error when verifying " + path + ", but got none");
{I}}}
{I}final String got = String.join("\\n", errors.stream().map(error -> Reporting.generateJsonPath(error.getPathSegments()) + ": " + error.getCause()).collect(Collectors.toList()));
{I}final Path errorsPath = Paths.get(path + ".errors");
{I}if (RECORD_MODE) {{
{II}Files.write(errorsPath, got.getBytes(StandardCharsets.UTF_8));
{I}}} else {{
{I}if (!Files.exists(errorsPath)) {{
{II}throw new FileNotFoundException("The file with the recorded errors does not exist: " + errorsPath);
{I}}}
{I}final String expected = Files.readAllLines(errorsPath).stream().collect(Collectors.joining("\\n"));
{I}assertEquals(expected,got,"The expected verification errors do not match the actual ones for the file " + path);
{I}}}
}}""")


def main() -> int:
    """Execute the main routine."""
    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent
    blocks = [
        _generate_find_files(),
        _generate_assert_no_verification_errors(),
        _generate_as_list(),
        _generate_assert_equals_expected_or_rerecord_verification_errors()
    ]  # type: List[str]

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import aas_core.aas3_0.reporting.Reporting;
import javax.annotation.Generated;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;
/**
* Provide methods for testing.
*/
@Generated("Generated by aas-test-gen")
public class Common{

    public static final boolean RECORD_MODE = System.getenv("AAS_CORE_AAS3_0_TESTS_RECORD_MODE") == null
            ? false :
            System.getenv("AAS_CORE_AAS3_0_TESTS_RECORD_MODE")
                    .toLowerCase()
                    .equals("true") ? true : false;
    public static String TEST_DATA_DIR = Paths.get("src", "test", "test_data").toAbsolutePath().toString();
    public static final List<String> CAUSES_DESERIALIZATION_FAILURE =
            Collections.unmodifiableList(Arrays.asList(
                    "TypeViolation",
                    "RequiredViolation",
                    "EnumViolation",
                    "UnexpectedAdditionalProperty"));

    public static final List<String> CAUSES_FOR_VERIFICATION_FAILURE =
            Collections.unmodifiableList(Arrays.asList(
                    "DateTimeStampUtcViolationOnFebruary29th",
                    "MaxLengthViolation",
                    "MinLengthViolation",
                    "PatternViolation",
                    "InvalidValueExample",
                    "InvalidMinMaxExample",
                    "SetViolation",
                    "ConstraintViolation"));
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "    "))

    writer.write(
        """
}  // class Common


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    target_pth = repo_root / "/home/mboehm/IdeaProjects/TestGen/src/test/java/Common.java"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
