"""Generate the test code for the verification of enums."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.java.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped

from test_codegen.common import load_symbol_table
from aas_core_codegen.java.common import (
    INDENT as I
)

def main() -> int:
    """Execute the main routine."""
    symbol_table = load_symbol_table()

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.Enumeration):
            continue

        enum_name = aas_core_codegen.java.naming.enum_name(our_type.name)

        assert (
            len(our_type.literals) > 0
        ), f"Unexpected enumeration without literals: {our_type.name}"

        literal_name = aas_core_codegen.java.naming.enum_literal_name(
            our_type.literals[0].name
        )

        blocks.append(
            Stripped(
                f"""\
@Test
public void test{enum_name}Valid() {{
{I}final List<Reporting.Error> errors = Verification.verify{enum_name}({enum_name}.{literal_name}).collect(Collectors.toList());
{I}assertTrue(errors.isEmpty());
}}  // void test{enum_name}Valid

@Test
public void test{enum_name}Invalid() {{
{I}final {enum_name} value = null;
{I}final List<Reporting.Error> errors = Verification.verify{enum_name}(value).collect(Collectors.toList());
{I}assertEquals(1,errors.size());
{I}assertEquals("Invalid {enum_name}: null", errors.get(0).getCause());
}}  // void test{enum_name}Invalid"""
            )
        )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import aas_core.aas3_0.reporting.Reporting;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.verification.Verification;
import org.junit.jupiter.api.Test;
import javax.annotation.Generated;
import java.util.List;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Generated("Generated by aas-test-gen")
public class TestVerificationOfEnums {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, "        "))

    writer.write(
        """
}  // class TestVerificationOfEnums


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    target_pth = repo_root / "src/test/java/TestVerificationOfEnums.java"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
