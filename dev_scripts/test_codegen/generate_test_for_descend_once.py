"""Generate the test code for the ``DescendOnce`` methods."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.java.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped
from aas_core_codegen.java.common import (
    INDENT as I,
    INDENT2 as II,
    INDENT3 as III,
    INDENT4 as IIII,
    INDENT4 as IIIII,
)

import test_codegen.common

def _generate_compare_or_rerecord_trace() -> Stripped:
    return Stripped(f"""\
private void compareOrRerecordTrace(IClass instance, Path expectedPath) throws IOException  {{
{I}final StringBuilder stringBuilder = new StringBuilder();
{I}for (IClass descendant : instance.descendOnce()) {{
{II}if (descendant instanceof IIdentifiable) {{
{III}stringBuilder
{IIII}.append(descendant.getClass().getSimpleName())
{IIII}.append(" with ID ")
{IIII}.append(((IIdentifiable) descendant).getId())
{IIII}.append("\\n");
{II}}} else if (descendant instanceof IReferable) {{
{III}stringBuilder.
{IIII}append(descendant.getClass().getSimpleName())
{IIII}.append(" with ID-short ")
{IIII}.append(((IReferable) descendant).getIdShort())
{IIII}.append("\\n");
{II}}} else {{
{III}stringBuilder
{III}.append(descendant.getClass().getSimpleName())
{III}.append("\\n");
{II}}}
{I}}}
{I}
{I}final String got = stringBuilder.toString();
{I}if (Common.RECORD_MODE) {{
{II}Files.createDirectories(expectedPath.getParent());
{II}Files.write(expectedPath, got.getBytes());
{I}}}else {{
{III}if (!Files.exists(expectedPath)) {{
{IIII}throw new FileNotFoundException(
{IIIII}"The file with the recorded trace does not exist: " +
{IIIII}expectedPath +
{IIIII}"; maybe you want to set the environment variable " +
{IIIII}"AAS_CORE_AAS3_0_TESTS_RECORD_MODE");
{III}}}
{III}final String expected = Files.readAllLines(expectedPath).stream().collect(Collectors.joining("\\n"));
{III}assertEquals(expected.replace("\\n",""), got.replace("\\n",""));
{I}}}
}}""")

def main() -> int:
    """Execute the main routine."""
    symbol_table = test_codegen.common.load_symbol_table()

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    # noinspection PyListCreation
    blocks = [_generate_compare_or_rerecord_trace()]  # type: List[str]

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.ConcreteClass):
            continue

        cls_name_java = aas_core_codegen.java.naming.class_name(our_type.name)

        blocks.append(
            Stripped(
                f"""\
@Test
public void test{cls_name_java}() throws IOException {{
{I}final {cls_name_java} instance = CommonJsonization.loadMaximal{cls_name_java}();
{I}compareOrRerecordTrace(instance,
{II}Paths.get(Common.TEST_DATA_DIR,
{III}"DescendOnce",
{III}"{cls_name_java}",
{III}"maximal.json.trace"));
}}  // public void test{cls_name_java}"""
            )
        )

    writer = io.StringIO()
    writer.write(
        """\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.IClass;
import aas_core.aas3_0.types.model.IIdentifiable;
import aas_core.aas3_0.types.model.IReferable;
import org.junit.jupiter.api.Test;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class TestDescendOnce {
"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, I))

    writer.write(
        """
}  // class TestDescendOnce


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    target_pth = repo_root / "src/test/java/TestDescendOnce.java"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
