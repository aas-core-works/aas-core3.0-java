"""Generate the test code for the JSON de/serialization of interfaces."""

import io
import os
import pathlib
import sys
import textwrap
from typing import List

import aas_core_codegen
import aas_core_codegen.common
import aas_core_codegen.java.naming
import aas_core_codegen.naming
import aas_core_codegen.parse
import aas_core_codegen.run
from aas_core_codegen import intermediate
from aas_core_codegen.common import Stripped

from test_codegen.common import load_symbol_table
from aas_core_codegen.java.common import (
    INDENT as I
)


def main() -> int:
    """Execute the main routine."""
    symbol_table = load_symbol_table()

    # noinspection PyListCreation
    blocks = []  # type: List[str]

    for our_type in symbol_table.our_types:
        if not isinstance(our_type, intermediate.Class):
            continue

        if our_type.interface is None or len(our_type.interface.implementers) == 0:
            continue

        if our_type.name == aas_core_codegen.common.Identifier("Event_payload"):
            # NOTE (mristin, 2022-06-21):
            # Event payload is a dangling class and can not be reached from
            # the environment. Hence, we skip it.
            continue

        for cls in our_type.interface.implementers:
            if cls.serialization is None or not cls.serialization.with_model_type:
                continue

            interface_name_java = aas_core_codegen.java.naming.interface_name(
                our_type.interface.name
            )
            cls_name_java = aas_core_codegen.java.naming.class_name(cls.name)

            blocks.append(
                Stripped(
                    f"""\
@Test
public void testRoundTrip{interface_name_java}From{cls_name_java}() throws IOException {{
{I}final {cls_name_java} instance = CommonJsonization.loadMaximal{cls_name_java}();
{I}final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
{I}final {interface_name_java} anotherInstance = Jsonization.Deserialize.deserialize{interface_name_java}(jsonObject);
{I}final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
{I}assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
}}  // void testRoundTrip{interface_name_java}From{cls_name_java}"""
                )
            )

    writer = io.StringIO()
    writer.write(
        f"""\
/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
 
import aas_core.aas3_0.jsonization.Jsonization;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TestJsonizationOfInterfaces {{

{I}final static ObjectMapper mapper = new ObjectMapper();

"""
    )

    for i, block in enumerate(blocks):
        if i > 0:
            writer.write("\n\n")

        writer.write(textwrap.indent(block, I))

    writer.write(
        """
}  // class TestJsonizationOfInterfaces


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
"""
    )

    this_path = pathlib.Path(os.path.realpath(__file__))
    repo_root = this_path.parent.parent.parent

    target_pth = repo_root / "src/test/java/TestJsonizationOfInterfaces.java"
    target_pth.write_text(writer.getvalue(), encoding="utf-8")

    return 0


if __name__ == "__main__":
    sys.exit(main())
