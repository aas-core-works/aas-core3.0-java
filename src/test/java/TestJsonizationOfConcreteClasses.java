/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
 
import aas_core.aas3_0.jsonization.Jsonization;
import aas_core.aas3_0.reporting.Reporting;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.IClass;
import aas_core.aas3_0.verification.Verification;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import com.fasterxml.jackson.core.JsonProcessingException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.stream.Collectors;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class TestJsonizationOfConcreteClasses {

        final static ObjectMapper mapper = new ObjectMapper();

        private static void assertSerializeDeserializeEqualsOriginal(JsonNode originalNode, IClass instance, Path path) throws JsonProcessingException {
          JsonNode serialized = null;
          try {
            serialized = Jsonization.Serialize.toJsonObject(instance);
          } catch (Exception exception) {
            fail("Expected no exception upon serialization of an instance " +
              "de-serialized from " + path + ", but got: " + exception);
          }
  
          if (serialized == null) {
            fail("Unexpected null serialization of an instance from " + path);
          }
          assertEquals(mapper.readTree(originalNode.toString()), mapper.readTree(serialized.toString()));
        }

        private static void testRoundTrip(Path path) throws IOException {
          final JsonNode node = mapper.readTree(path.toFile());
          final Environment instance = Jsonization.Deserialize.deserializeEnvironment(node);
          final Iterable<Reporting.Error> errors = Verification.verify(instance);
          final List<Reporting.Error> errorList = Common.asList(errors);
          Common.assertNoVerificationErrors(errorList, path);
          assertSerializeDeserializeEqualsOriginal(node, instance, path);
        }

        private static void testVerificationFail(Path path) throws IOException {
          final JsonNode node = mapper.readTree(path.toFile());
          final Environment instance = Jsonization.Deserialize.deserializeEnvironment(node);
          final Iterable<Reporting.Error> errors = Verification.verify(instance);
          final List<Reporting.Error> errorList = Common.asList(errors);
          Common.assertEqualsExpectedOrRerecordVerificationErrors(errorList, path);
        }

        private static void testDeserializationFail(Path path) throws IOException {
          final JsonNode node = mapper.readTree(path.toFile());
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeEnvironment(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          assertEqualsExpectedOrRerecordDeserializationException(exception, path);
        }

        private static void assertEqualsExpectedOrRerecordDeserializationException(Jsonization.DeserializeException exception, Path path) throws IOException {
          if (exception == null) {
            fail("Expected a Jsonization exception when de-serializing " + path + ", but got none.");
          } else {
            final Path exceptionPath = Paths.get(path + ".exception");
            final String got = exception.getMessage();
            if (Common.RECORD_MODE) {
              Files.write(exceptionPath, got.getBytes(StandardCharsets.UTF_8));
            } else {
              if (!Files.exists(exceptionPath)) {
                throw new FileNotFoundException("The file with the recorded errors does not exist: " + exceptionPath);
              }
              final String expected = Files.readAllLines(exceptionPath).stream().collect(Collectors.joining("\n"));
              assertEquals(expected, got, "The expected exception does not match the actual one for the file " + path);
            }
          }
        }

        @Test
        public void testExtensionOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Extension");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testExtensionOk

        @Test
        public void testExtensionDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeExtension(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testExtensionDeserializationFromNonObjectFail

        @Test
        public void testExtensionDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Extension");
            if (!Files.exists(searchPath)) {
              // No examples of Extension for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Extension_deserialization_fail

        @Test
        public void testExtensionVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Extension");
            if (!Files.exists(searchPath)) {
              // No examples of Extension for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Extension_verification_fail

        @Test
        public void testAdministrativeInformationOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "AdministrativeInformation");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testAdministrativeInformationOk

        @Test
        public void testAdministrativeInformationDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeAdministrativeInformation(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testAdministrativeInformationDeserializationFromNonObjectFail

        @Test
        public void testAdministrativeInformationDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AdministrativeInformation");
            if (!Files.exists(searchPath)) {
              // No examples of AdministrativeInformation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_AdministrativeInformation_deserialization_fail

        @Test
        public void testAdministrativeInformationVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AdministrativeInformation");
            if (!Files.exists(searchPath)) {
              // No examples of AdministrativeInformation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_AdministrativeInformation_verification_fail

        @Test
        public void testQualifierOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Qualifier");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testQualifierOk

        @Test
        public void testQualifierDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeQualifier(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testQualifierDeserializationFromNonObjectFail

        @Test
        public void testQualifierDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Qualifier");
            if (!Files.exists(searchPath)) {
              // No examples of Qualifier for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Qualifier_deserialization_fail

        @Test
        public void testQualifierVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Qualifier");
            if (!Files.exists(searchPath)) {
              // No examples of Qualifier for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Qualifier_verification_fail

        @Test
        public void testAssetAdministrationShellOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "AssetAdministrationShell");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testAssetAdministrationShellOk

        @Test
        public void testAssetAdministrationShellDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeAssetAdministrationShell(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testAssetAdministrationShellDeserializationFromNonObjectFail

        @Test
        public void testAssetAdministrationShellDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AssetAdministrationShell");
            if (!Files.exists(searchPath)) {
              // No examples of AssetAdministrationShell for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_AssetAdministrationShell_deserialization_fail

        @Test
        public void testAssetAdministrationShellVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AssetAdministrationShell");
            if (!Files.exists(searchPath)) {
              // No examples of AssetAdministrationShell for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_AssetAdministrationShell_verification_fail

        @Test
        public void testAssetInformationOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "AssetInformation");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testAssetInformationOk

        @Test
        public void testAssetInformationDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeAssetInformation(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testAssetInformationDeserializationFromNonObjectFail

        @Test
        public void testAssetInformationDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AssetInformation");
            if (!Files.exists(searchPath)) {
              // No examples of AssetInformation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_AssetInformation_deserialization_fail

        @Test
        public void testAssetInformationVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AssetInformation");
            if (!Files.exists(searchPath)) {
              // No examples of AssetInformation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_AssetInformation_verification_fail

        @Test
        public void testResourceOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Resource");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testResourceOk

        @Test
        public void testResourceDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeResource(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testResourceDeserializationFromNonObjectFail

        @Test
        public void testResourceDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Resource");
            if (!Files.exists(searchPath)) {
              // No examples of Resource for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Resource_deserialization_fail

        @Test
        public void testResourceVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Resource");
            if (!Files.exists(searchPath)) {
              // No examples of Resource for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Resource_verification_fail

        @Test
        public void testSpecificAssetIdOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "SpecificAssetId");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testSpecificAssetIdOk

        @Test
        public void testSpecificAssetIdDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeSpecificAssetId(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testSpecificAssetIdDeserializationFromNonObjectFail

        @Test
        public void testSpecificAssetIdDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SpecificAssetId");
            if (!Files.exists(searchPath)) {
              // No examples of SpecificAssetId for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_SpecificAssetId_deserialization_fail

        @Test
        public void testSpecificAssetIdVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SpecificAssetId");
            if (!Files.exists(searchPath)) {
              // No examples of SpecificAssetId for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_SpecificAssetId_verification_fail

        @Test
        public void testSubmodelOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Submodel");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testSubmodelOk

        @Test
        public void testSubmodelDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeSubmodel(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testSubmodelDeserializationFromNonObjectFail

        @Test
        public void testSubmodelDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Submodel");
            if (!Files.exists(searchPath)) {
              // No examples of Submodel for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Submodel_deserialization_fail

        @Test
        public void testSubmodelVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Submodel");
            if (!Files.exists(searchPath)) {
              // No examples of Submodel for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Submodel_verification_fail

        @Test
        public void testRelationshipElementOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "RelationshipElement");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testRelationshipElementOk

        @Test
        public void testRelationshipElementDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeRelationshipElement(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testRelationshipElementDeserializationFromNonObjectFail

        @Test
        public void testRelationshipElementDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "RelationshipElement");
            if (!Files.exists(searchPath)) {
              // No examples of RelationshipElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_RelationshipElement_deserialization_fail

        @Test
        public void testRelationshipElementVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "RelationshipElement");
            if (!Files.exists(searchPath)) {
              // No examples of RelationshipElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_RelationshipElement_verification_fail

        @Test
        public void testSubmodelElementListOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "SubmodelElementList");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testSubmodelElementListOk

        @Test
        public void testSubmodelElementListDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeSubmodelElementList(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testSubmodelElementListDeserializationFromNonObjectFail

        @Test
        public void testSubmodelElementListDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SubmodelElementList");
            if (!Files.exists(searchPath)) {
              // No examples of SubmodelElementList for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_SubmodelElementList_deserialization_fail

        @Test
        public void testSubmodelElementListVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SubmodelElementList");
            if (!Files.exists(searchPath)) {
              // No examples of SubmodelElementList for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_SubmodelElementList_verification_fail

        @Test
        public void testSubmodelElementCollectionOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "SubmodelElementCollection");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testSubmodelElementCollectionOk

        @Test
        public void testSubmodelElementCollectionDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeSubmodelElementCollection(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testSubmodelElementCollectionDeserializationFromNonObjectFail

        @Test
        public void testSubmodelElementCollectionDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SubmodelElementCollection");
            if (!Files.exists(searchPath)) {
              // No examples of SubmodelElementCollection for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_SubmodelElementCollection_deserialization_fail

        @Test
        public void testSubmodelElementCollectionVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "SubmodelElementCollection");
            if (!Files.exists(searchPath)) {
              // No examples of SubmodelElementCollection for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_SubmodelElementCollection_verification_fail

        @Test
        public void testPropertyOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Property");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testPropertyOk

        @Test
        public void testPropertyDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeProperty(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testPropertyDeserializationFromNonObjectFail

        @Test
        public void testPropertyDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Property");
            if (!Files.exists(searchPath)) {
              // No examples of Property for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Property_deserialization_fail

        @Test
        public void testPropertyVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Property");
            if (!Files.exists(searchPath)) {
              // No examples of Property for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Property_verification_fail

        @Test
        public void testMultiLanguagePropertyOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "MultiLanguageProperty");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testMultiLanguagePropertyOk

        @Test
        public void testMultiLanguagePropertyDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeMultiLanguageProperty(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testMultiLanguagePropertyDeserializationFromNonObjectFail

        @Test
        public void testMultiLanguagePropertyDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "MultiLanguageProperty");
            if (!Files.exists(searchPath)) {
              // No examples of MultiLanguageProperty for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_MultiLanguageProperty_deserialization_fail

        @Test
        public void testMultiLanguagePropertyVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "MultiLanguageProperty");
            if (!Files.exists(searchPath)) {
              // No examples of MultiLanguageProperty for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_MultiLanguageProperty_verification_fail

        @Test
        public void testRangeOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Range");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testRangeOk

        @Test
        public void testRangeDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeRange(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testRangeDeserializationFromNonObjectFail

        @Test
        public void testRangeDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Range");
            if (!Files.exists(searchPath)) {
              // No examples of Range for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Range_deserialization_fail

        @Test
        public void testRangeVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Range");
            if (!Files.exists(searchPath)) {
              // No examples of Range for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Range_verification_fail

        @Test
        public void testReferenceElementOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "ReferenceElement");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testReferenceElementOk

        @Test
        public void testReferenceElementDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeReferenceElement(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testReferenceElementDeserializationFromNonObjectFail

        @Test
        public void testReferenceElementDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ReferenceElement");
            if (!Files.exists(searchPath)) {
              // No examples of ReferenceElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_ReferenceElement_deserialization_fail

        @Test
        public void testReferenceElementVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ReferenceElement");
            if (!Files.exists(searchPath)) {
              // No examples of ReferenceElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_ReferenceElement_verification_fail

        @Test
        public void testBlobOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Blob");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testBlobOk

        @Test
        public void testBlobDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeBlob(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testBlobDeserializationFromNonObjectFail

        @Test
        public void testBlobDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Blob");
            if (!Files.exists(searchPath)) {
              // No examples of Blob for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Blob_deserialization_fail

        @Test
        public void testBlobVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Blob");
            if (!Files.exists(searchPath)) {
              // No examples of Blob for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Blob_verification_fail

        @Test
        public void testFileOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "File");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testFileOk

        @Test
        public void testFileDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeFile(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testFileDeserializationFromNonObjectFail

        @Test
        public void testFileDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "File");
            if (!Files.exists(searchPath)) {
              // No examples of File for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_File_deserialization_fail

        @Test
        public void testFileVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "File");
            if (!Files.exists(searchPath)) {
              // No examples of File for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_File_verification_fail

        @Test
        public void testAnnotatedRelationshipElementOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "AnnotatedRelationshipElement");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testAnnotatedRelationshipElementOk

        @Test
        public void testAnnotatedRelationshipElementDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeAnnotatedRelationshipElement(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testAnnotatedRelationshipElementDeserializationFromNonObjectFail

        @Test
        public void testAnnotatedRelationshipElementDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AnnotatedRelationshipElement");
            if (!Files.exists(searchPath)) {
              // No examples of AnnotatedRelationshipElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_AnnotatedRelationshipElement_deserialization_fail

        @Test
        public void testAnnotatedRelationshipElementVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "AnnotatedRelationshipElement");
            if (!Files.exists(searchPath)) {
              // No examples of AnnotatedRelationshipElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_AnnotatedRelationshipElement_verification_fail

        @Test
        public void testEntityOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Entity");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testEntityOk

        @Test
        public void testEntityDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeEntity(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testEntityDeserializationFromNonObjectFail

        @Test
        public void testEntityDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Entity");
            if (!Files.exists(searchPath)) {
              // No examples of Entity for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Entity_deserialization_fail

        @Test
        public void testEntityVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Entity");
            if (!Files.exists(searchPath)) {
              // No examples of Entity for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Entity_verification_fail

        @Test
        public void testEventPayloadOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "SelfContained",
            "Expected",
            "EventPayload");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
  
          for (Path path : paths) {
            final JsonNode node = mapper.readTree(path.toFile());
            final EventPayload instance = Jsonization.Deserialize.deserializeEventPayload(node);
            final Iterable<Reporting.Error> errors = Verification.verify(instance);
            final List<Reporting.Error> errorList = Common.asList(errors);
            Common.assertNoVerificationErrors(errorList, path);
            assertSerializeDeserializeEqualsOriginal(node, instance, path);
          }
        }  // public void testEventPayloadOk

        @Test
        public void testEventPayloadDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "SelfContained",
              "Unexpected",
              cause,
              "EventPayload");
            if (!Files.exists(searchPath)) {
              // No examples of EventPayload for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              Jsonization.DeserializeException exception = null;
              try {
                Jsonization.Deserialize.deserializeEventPayload(node);
              } catch (Jsonization.DeserializeException observedException) {
                exception = observedException;
              }
              assertEqualsExpectedOrRerecordDeserializationException(exception, path);
            }
          }
        }  // public void testEventPayloadDeserializationFail

        @Test
        public void testEventPayloadVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "SelfContained",
              "Unexpected",
              cause,
              "EventPayload");
            if (!Files.exists(searchPath)) {
              // No examples of EventPayload for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              final EventPayload instance = Jsonization.Deserialize.deserializeEventPayload(node);
              final Iterable<Reporting.Error> errors = Verification.verify(instance);
              final List<Reporting.Error> errorList = Common.asList(errors);
              Common.assertEqualsExpectedOrRerecordVerificationErrors(errorList, path);
            }
          }
        }  // public void testEventPayloadVerificationFail

        @Test
        public void testBasicEventElementOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "BasicEventElement");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testBasicEventElementOk

        @Test
        public void testBasicEventElementDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeBasicEventElement(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testBasicEventElementDeserializationFromNonObjectFail

        @Test
        public void testBasicEventElementDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "BasicEventElement");
            if (!Files.exists(searchPath)) {
              // No examples of BasicEventElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_BasicEventElement_deserialization_fail

        @Test
        public void testBasicEventElementVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "BasicEventElement");
            if (!Files.exists(searchPath)) {
              // No examples of BasicEventElement for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_BasicEventElement_verification_fail

        @Test
        public void testOperationOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Operation");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testOperationOk

        @Test
        public void testOperationDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeOperation(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testOperationDeserializationFromNonObjectFail

        @Test
        public void testOperationDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Operation");
            if (!Files.exists(searchPath)) {
              // No examples of Operation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Operation_deserialization_fail

        @Test
        public void testOperationVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Operation");
            if (!Files.exists(searchPath)) {
              // No examples of Operation for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Operation_verification_fail

        @Test
        public void testOperationVariableOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "OperationVariable");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testOperationVariableOk

        @Test
        public void testOperationVariableDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeOperationVariable(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testOperationVariableDeserializationFromNonObjectFail

        @Test
        public void testOperationVariableDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "OperationVariable");
            if (!Files.exists(searchPath)) {
              // No examples of OperationVariable for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_OperationVariable_deserialization_fail

        @Test
        public void testOperationVariableVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "OperationVariable");
            if (!Files.exists(searchPath)) {
              // No examples of OperationVariable for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_OperationVariable_verification_fail

        @Test
        public void testCapabilityOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Capability");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testCapabilityOk

        @Test
        public void testCapabilityDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeCapability(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testCapabilityDeserializationFromNonObjectFail

        @Test
        public void testCapabilityDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Capability");
            if (!Files.exists(searchPath)) {
              // No examples of Capability for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Capability_deserialization_fail

        @Test
        public void testCapabilityVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Capability");
            if (!Files.exists(searchPath)) {
              // No examples of Capability for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Capability_verification_fail

        @Test
        public void testConceptDescriptionOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "ConceptDescription");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testConceptDescriptionOk

        @Test
        public void testConceptDescriptionDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeConceptDescription(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testConceptDescriptionDeserializationFromNonObjectFail

        @Test
        public void testConceptDescriptionDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ConceptDescription");
            if (!Files.exists(searchPath)) {
              // No examples of ConceptDescription for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_ConceptDescription_deserialization_fail

        @Test
        public void testConceptDescriptionVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ConceptDescription");
            if (!Files.exists(searchPath)) {
              // No examples of ConceptDescription for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_ConceptDescription_verification_fail

        @Test
        public void testReferenceOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Reference");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testReferenceOk

        @Test
        public void testReferenceDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeReference(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testReferenceDeserializationFromNonObjectFail

        @Test
        public void testReferenceDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Reference");
            if (!Files.exists(searchPath)) {
              // No examples of Reference for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Reference_deserialization_fail

        @Test
        public void testReferenceVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Reference");
            if (!Files.exists(searchPath)) {
              // No examples of Reference for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Reference_verification_fail

        @Test
        public void testKeyOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "Key");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testKeyOk

        @Test
        public void testKeyDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeKey(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testKeyDeserializationFromNonObjectFail

        @Test
        public void testKeyDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Key");
            if (!Files.exists(searchPath)) {
              // No examples of Key for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_Key_deserialization_fail

        @Test
        public void testKeyVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "Key");
            if (!Files.exists(searchPath)) {
              // No examples of Key for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_Key_verification_fail

        @Test
        public void testLangStringNameTypeOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LangStringNameType");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLangStringNameTypeOk

        @Test
        public void testLangStringNameTypeDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLangStringNameType(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLangStringNameTypeDeserializationFromNonObjectFail

        @Test
        public void testLangStringNameTypeDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringNameType");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringNameType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LangStringNameType_deserialization_fail

        @Test
        public void testLangStringNameTypeVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringNameType");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringNameType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LangStringNameType_verification_fail

        @Test
        public void testLangStringTextTypeOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LangStringTextType");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLangStringTextTypeOk

        @Test
        public void testLangStringTextTypeDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLangStringTextType(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLangStringTextTypeDeserializationFromNonObjectFail

        @Test
        public void testLangStringTextTypeDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringTextType");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringTextType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LangStringTextType_deserialization_fail

        @Test
        public void testLangStringTextTypeVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringTextType");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringTextType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LangStringTextType_verification_fail

        @Test
        public void testEnvironmentOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "SelfContained",
            "Expected",
            "Environment");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
  
          for (Path path : paths) {
            final JsonNode node = mapper.readTree(path.toFile());
            final Environment instance = Jsonization.Deserialize.deserializeEnvironment(node);
            final Iterable<Reporting.Error> errors = Verification.verify(instance);
            final List<Reporting.Error> errorList = Common.asList(errors);
            Common.assertNoVerificationErrors(errorList, path);
            assertSerializeDeserializeEqualsOriginal(node, instance, path);
          }
        }  // public void testEnvironmentOk

        @Test
        public void testEnvironmentDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "SelfContained",
              "Unexpected",
              cause,
              "Environment");
            if (!Files.exists(searchPath)) {
              // No examples of Environment for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              Jsonization.DeserializeException exception = null;
              try {
                Jsonization.Deserialize.deserializeEnvironment(node);
              } catch (Jsonization.DeserializeException observedException) {
                exception = observedException;
              }
              assertEqualsExpectedOrRerecordDeserializationException(exception, path);
            }
          }
        }  // public void testEnvironmentDeserializationFail

        @Test
        public void testEnvironmentVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "SelfContained",
              "Unexpected",
              cause,
              "Environment");
            if (!Files.exists(searchPath)) {
              // No examples of Environment for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              final Environment instance = Jsonization.Deserialize.deserializeEnvironment(node);
              final Iterable<Reporting.Error> errors = Verification.verify(instance);
              final List<Reporting.Error> errorList = Common.asList(errors);
              Common.assertEqualsExpectedOrRerecordVerificationErrors(errorList, path);
            }
          }
        }  // public void testEnvironmentVerificationFail

        @Test
        public void testEmbeddedDataSpecificationOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "EmbeddedDataSpecification");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testEmbeddedDataSpecificationOk

        @Test
        public void testEmbeddedDataSpecificationDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeEmbeddedDataSpecification(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testEmbeddedDataSpecificationDeserializationFromNonObjectFail

        @Test
        public void testEmbeddedDataSpecificationDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "EmbeddedDataSpecification");
            if (!Files.exists(searchPath)) {
              // No examples of EmbeddedDataSpecification for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_EmbeddedDataSpecification_deserialization_fail

        @Test
        public void testEmbeddedDataSpecificationVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "EmbeddedDataSpecification");
            if (!Files.exists(searchPath)) {
              // No examples of EmbeddedDataSpecification for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_EmbeddedDataSpecification_verification_fail

        @Test
        public void testLevelTypeOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LevelType");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLevelTypeOk

        @Test
        public void testLevelTypeDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLevelType(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLevelTypeDeserializationFromNonObjectFail

        @Test
        public void testLevelTypeDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LevelType");
            if (!Files.exists(searchPath)) {
              // No examples of LevelType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LevelType_deserialization_fail

        @Test
        public void testLevelTypeVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LevelType");
            if (!Files.exists(searchPath)) {
              // No examples of LevelType for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LevelType_verification_fail

        @Test
        public void testValueReferencePairOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "ValueReferencePair");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testValueReferencePairOk

        @Test
        public void testValueReferencePairDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeValueReferencePair(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testValueReferencePairDeserializationFromNonObjectFail

        @Test
        public void testValueReferencePairDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ValueReferencePair");
            if (!Files.exists(searchPath)) {
              // No examples of ValueReferencePair for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_ValueReferencePair_deserialization_fail

        @Test
        public void testValueReferencePairVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ValueReferencePair");
            if (!Files.exists(searchPath)) {
              // No examples of ValueReferencePair for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_ValueReferencePair_verification_fail

        @Test
        public void testValueListOk() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "ValueList");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testValueListOk

        @Test
        public void testValueListDeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeValueList(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testValueListDeserializationFromNonObjectFail

        @Test
        public void testValueListDeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ValueList");
            if (!Files.exists(searchPath)) {
              // No examples of ValueList for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_ValueList_deserialization_fail

        @Test
        public void testValueListVerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "ValueList");
            if (!Files.exists(searchPath)) {
              // No examples of ValueList for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_ValueList_verification_fail

        @Test
        public void testLangStringPreferredNameTypeIec61360Ok() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LangStringPreferredNameTypeIec61360");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLangStringPreferredNameTypeIec61360Ok

        @Test
        public void testLangStringPreferredNameTypeIec61360DeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLangStringPreferredNameTypeIec61360(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLangStringPreferredNameTypeIec61360DeserializationFromNonObjectFail

        @Test
        public void testLangStringPreferredNameTypeIec61360DeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringPreferredNameTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LangStringPreferredNameTypeIec61360_deserialization_fail

        @Test
        public void testLangStringPreferredNameTypeIec61360VerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringPreferredNameTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringPreferredNameTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LangStringPreferredNameTypeIec61360_verification_fail

        @Test
        public void testLangStringShortNameTypeIec61360Ok() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LangStringShortNameTypeIec61360");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLangStringShortNameTypeIec61360Ok

        @Test
        public void testLangStringShortNameTypeIec61360DeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLangStringShortNameTypeIec61360(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLangStringShortNameTypeIec61360DeserializationFromNonObjectFail

        @Test
        public void testLangStringShortNameTypeIec61360DeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringShortNameTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringShortNameTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LangStringShortNameTypeIec61360_deserialization_fail

        @Test
        public void testLangStringShortNameTypeIec61360VerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringShortNameTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringShortNameTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LangStringShortNameTypeIec61360_verification_fail

        @Test
        public void testLangStringDefinitionTypeIec61360Ok() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "LangStringDefinitionTypeIec61360");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testLangStringDefinitionTypeIec61360Ok

        @Test
        public void testLangStringDefinitionTypeIec61360DeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeLangStringDefinitionTypeIec61360(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testLangStringDefinitionTypeIec61360DeserializationFromNonObjectFail

        @Test
        public void testLangStringDefinitionTypeIec61360DeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringDefinitionTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_LangStringDefinitionTypeIec61360_deserialization_fail

        @Test
        public void testLangStringDefinitionTypeIec61360VerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "LangStringDefinitionTypeIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of LangStringDefinitionTypeIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_LangStringDefinitionTypeIec61360_verification_fail

        @Test
        public void testDataSpecificationIec61360Ok() throws IOException {
          final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
            "Json",
            "ContainedInEnvironment",
            "Expected",
            "DataSpecificationIec61360");
          final List<Path> paths = Common.findPaths(searchPath, ".json");
          for (Path path : paths) {
            testRoundTrip(path);
          }
        }  // public void testDataSpecificationIec61360Ok

        @Test
        public void testDataSpecificationIec61360DeserializationFromNonObjectFail() {
          final JsonNode node = null;
          Jsonization.DeserializeException exception = null;
          try {
            Jsonization.Deserialize.deserializeDataSpecificationIec61360(node);
          } catch (Jsonization.DeserializeException observedException) {
            exception = observedException;
          }
          if (exception == null) {
            fail("Expected an exception, but got none");
          }
          if (!exception.getMessage().startsWith("Expected a JsonObject, but got ")) {
            fail("Unexpected exception message: " + exception.getMessage());
          }
        }  // public void testDataSpecificationIec61360DeserializationFromNonObjectFail

        @Test
        public void testDataSpecificationIec61360DeserializationFail() throws IOException {
          for (String cause : Common.CAUSES_JSON_DESERIALIZATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "DataSpecificationIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of DataSpecificationIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              testDeserializationFail(path);
            }
          }
        }  // public void Test_DataSpecificationIec61360_deserialization_fail

        @Test
        public void testDataSpecificationIec61360VerificationFail() throws IOException {
          for (String cause : Common.CAUSES_FOR_VERIFICATION_FAILURE) {
            final Path searchPath = Paths.get(Common.TEST_DATA_DIR,
              "Json",
              "ContainedInEnvironment",
              "Unexpected",
              cause,
              "DataSpecificationIec61360");
            if (!Files.exists(searchPath)) {
              // No examples of DataSpecificationIec61360 for the failure cause.
              continue;
            }
            final List<Path> paths = Common.findPaths(searchPath, ".json");
            for (Path path : paths) {
              final JsonNode node = mapper.readTree(path.toFile());
              testVerificationFail(path);
            }
          }
        }  // public void Test_DataSpecificationIec61360_verification_fail
}  // class TestJsonizationOfConcreteClasses

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
