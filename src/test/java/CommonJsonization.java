/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
 
import aas_core.aas3_0.jsonization.Jsonization;
import aas_core.aas3_0.types.impl.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.annotation.Generated;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
* Provide methods to load instances from JSON test data.
*/
@Generated("Generated by aas-test-gen")
public class CommonJsonization{
        public static Extension loadMaximalExtension() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Extension",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Extension",container);
        }  // public static loadMaximalExtension

        public static Extension loadMinimalExtension() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Extension",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Extension",container);
        }  // public static loadMinimalExtension

        public static AdministrativeInformation loadMaximalAdministrativeInformation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AdministrativeInformation",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AdministrativeInformation",container);
        }  // public static loadMaximalAdministrativeInformation

        public static AdministrativeInformation loadMinimalAdministrativeInformation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AdministrativeInformation",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AdministrativeInformation",container);
        }  // public static loadMinimalAdministrativeInformation

        public static Qualifier loadMaximalQualifier() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Qualifier",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Qualifier",container);
        }  // public static loadMaximalQualifier

        public static Qualifier loadMinimalQualifier() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Qualifier",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Qualifier",container);
        }  // public static loadMinimalQualifier

        public static AssetAdministrationShell loadMaximalAssetAdministrationShell() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AssetAdministrationShell",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AssetAdministrationShell",container);
        }  // public static loadMaximalAssetAdministrationShell

        public static AssetAdministrationShell loadMinimalAssetAdministrationShell() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AssetAdministrationShell",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AssetAdministrationShell",container);
        }  // public static loadMinimalAssetAdministrationShell

        public static AssetInformation loadMaximalAssetInformation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AssetInformation",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AssetInformation",container);
        }  // public static loadMaximalAssetInformation

        public static AssetInformation loadMinimalAssetInformation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AssetInformation",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AssetInformation",container);
        }  // public static loadMinimalAssetInformation

        public static Resource loadMaximalResource() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Resource",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Resource",container);
        }  // public static loadMaximalResource

        public static Resource loadMinimalResource() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Resource",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Resource",container);
        }  // public static loadMinimalResource

        public static SpecificAssetId loadMaximalSpecificAssetId() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SpecificAssetId",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SpecificAssetId",container);
        }  // public static loadMaximalSpecificAssetId

        public static SpecificAssetId loadMinimalSpecificAssetId() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SpecificAssetId",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SpecificAssetId",container);
        }  // public static loadMinimalSpecificAssetId

        public static Submodel loadMaximalSubmodel() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Submodel",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Submodel",container);
        }  // public static loadMaximalSubmodel

        public static Submodel loadMinimalSubmodel() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Submodel",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Submodel",container);
        }  // public static loadMinimalSubmodel

        public static RelationshipElement loadMaximalRelationshipElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "RelationshipElement",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("RelationshipElement",container);
        }  // public static loadMaximalRelationshipElement

        public static RelationshipElement loadMinimalRelationshipElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "RelationshipElement",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("RelationshipElement",container);
        }  // public static loadMinimalRelationshipElement

        public static SubmodelElementList loadMaximalSubmodelElementList() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SubmodelElementList",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SubmodelElementList",container);
        }  // public static loadMaximalSubmodelElementList

        public static SubmodelElementList loadMinimalSubmodelElementList() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SubmodelElementList",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SubmodelElementList",container);
        }  // public static loadMinimalSubmodelElementList

        public static SubmodelElementCollection loadMaximalSubmodelElementCollection() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SubmodelElementCollection",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SubmodelElementCollection",container);
        }  // public static loadMaximalSubmodelElementCollection

        public static SubmodelElementCollection loadMinimalSubmodelElementCollection() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "SubmodelElementCollection",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("SubmodelElementCollection",container);
        }  // public static loadMinimalSubmodelElementCollection

        public static Property loadMaximalProperty() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Property",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Property",container);
        }  // public static loadMaximalProperty

        public static Property loadMinimalProperty() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Property",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Property",container);
        }  // public static loadMinimalProperty

        public static MultiLanguageProperty loadMaximalMultiLanguageProperty() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "MultiLanguageProperty",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("MultiLanguageProperty",container);
        }  // public static loadMaximalMultiLanguageProperty

        public static MultiLanguageProperty loadMinimalMultiLanguageProperty() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "MultiLanguageProperty",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("MultiLanguageProperty",container);
        }  // public static loadMinimalMultiLanguageProperty

        public static Range loadMaximalRange() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Range",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Range",container);
        }  // public static loadMaximalRange

        public static Range loadMinimalRange() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Range",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Range",container);
        }  // public static loadMinimalRange

        public static ReferenceElement loadMaximalReferenceElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ReferenceElement",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ReferenceElement",container);
        }  // public static loadMaximalReferenceElement

        public static ReferenceElement loadMinimalReferenceElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ReferenceElement",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ReferenceElement",container);
        }  // public static loadMinimalReferenceElement

        public static Blob loadMaximalBlob() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Blob",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Blob",container);
        }  // public static loadMaximalBlob

        public static Blob loadMinimalBlob() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Blob",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Blob",container);
        }  // public static loadMinimalBlob

        public static File loadMaximalFile() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "File",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("File",container);
        }  // public static loadMaximalFile

        public static File loadMinimalFile() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "File",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("File",container);
        }  // public static loadMinimalFile

        public static AnnotatedRelationshipElement loadMaximalAnnotatedRelationshipElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AnnotatedRelationshipElement",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AnnotatedRelationshipElement",container);
        }  // public static loadMaximalAnnotatedRelationshipElement

        public static AnnotatedRelationshipElement loadMinimalAnnotatedRelationshipElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "AnnotatedRelationshipElement",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("AnnotatedRelationshipElement",container);
        }  // public static loadMinimalAnnotatedRelationshipElement

        public static Entity loadMaximalEntity() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Entity",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Entity",container);
        }  // public static loadMaximalEntity

        public static Entity loadMinimalEntity() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Entity",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Entity",container);
        }  // public static loadMinimalEntity

        public static EventPayload loadMaximalEventPayload() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "SelfContained",
                "Expected",
                "EventPayload",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final EventPayload container = Jsonization.Deserialize.deserializeEventPayload(node);
            return Common.mustFind("EventPayload",container);
        }  // public static loadMaximalEventPayload

        public static EventPayload loadMinimalEventPayload() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "SelfContained",
                "Expected",
                "EventPayload",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final EventPayload container = Jsonization.Deserialize.deserializeEventPayload(node);
            return Common.mustFind("EventPayload",container);
        }  // public static loadMinimalEventPayload

        public static BasicEventElement loadMaximalBasicEventElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "BasicEventElement",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("BasicEventElement",container);
        }  // public static loadMaximalBasicEventElement

        public static BasicEventElement loadMinimalBasicEventElement() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "BasicEventElement",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("BasicEventElement",container);
        }  // public static loadMinimalBasicEventElement

        public static Operation loadMaximalOperation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Operation",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Operation",container);
        }  // public static loadMaximalOperation

        public static Operation loadMinimalOperation() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Operation",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Operation",container);
        }  // public static loadMinimalOperation

        public static OperationVariable loadMaximalOperationVariable() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "OperationVariable",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("OperationVariable",container);
        }  // public static loadMaximalOperationVariable

        public static OperationVariable loadMinimalOperationVariable() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "OperationVariable",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("OperationVariable",container);
        }  // public static loadMinimalOperationVariable

        public static Capability loadMaximalCapability() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Capability",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Capability",container);
        }  // public static loadMaximalCapability

        public static Capability loadMinimalCapability() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Capability",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Capability",container);
        }  // public static loadMinimalCapability

        public static ConceptDescription loadMaximalConceptDescription() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ConceptDescription",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ConceptDescription",container);
        }  // public static loadMaximalConceptDescription

        public static ConceptDescription loadMinimalConceptDescription() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ConceptDescription",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ConceptDescription",container);
        }  // public static loadMinimalConceptDescription

        public static Reference loadMaximalReference() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Reference",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Reference",container);
        }  // public static loadMaximalReference

        public static Reference loadMinimalReference() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Reference",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Reference",container);
        }  // public static loadMinimalReference

        public static Key loadMaximalKey() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Key",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Key",container);
        }  // public static loadMaximalKey

        public static Key loadMinimalKey() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "Key",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Key",container);
        }  // public static loadMinimalKey

        public static LangStringNameType loadMaximalLangStringNameType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringNameType",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringNameType",container);
        }  // public static loadMaximalLangStringNameType

        public static LangStringNameType loadMinimalLangStringNameType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringNameType",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringNameType",container);
        }  // public static loadMinimalLangStringNameType

        public static LangStringTextType loadMaximalLangStringTextType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringTextType",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringTextType",container);
        }  // public static loadMaximalLangStringTextType

        public static LangStringTextType loadMinimalLangStringTextType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringTextType",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringTextType",container);
        }  // public static loadMinimalLangStringTextType

        public static Environment loadMaximalEnvironment() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "SelfContained",
                "Expected",
                "Environment",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Environment",container);
        }  // public static loadMaximalEnvironment

        public static Environment loadMinimalEnvironment() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "SelfContained",
                "Expected",
                "Environment",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("Environment",container);
        }  // public static loadMinimalEnvironment

        public static EmbeddedDataSpecification loadMaximalEmbeddedDataSpecification() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "EmbeddedDataSpecification",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("EmbeddedDataSpecification",container);
        }  // public static loadMaximalEmbeddedDataSpecification

        public static EmbeddedDataSpecification loadMinimalEmbeddedDataSpecification() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "EmbeddedDataSpecification",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("EmbeddedDataSpecification",container);
        }  // public static loadMinimalEmbeddedDataSpecification

        public static LevelType loadMaximalLevelType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LevelType",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LevelType",container);
        }  // public static loadMaximalLevelType

        public static LevelType loadMinimalLevelType() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LevelType",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LevelType",container);
        }  // public static loadMinimalLevelType

        public static ValueReferencePair loadMaximalValueReferencePair() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ValueReferencePair",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ValueReferencePair",container);
        }  // public static loadMaximalValueReferencePair

        public static ValueReferencePair loadMinimalValueReferencePair() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ValueReferencePair",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ValueReferencePair",container);
        }  // public static loadMinimalValueReferencePair

        public static ValueList loadMaximalValueList() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ValueList",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ValueList",container);
        }  // public static loadMaximalValueList

        public static ValueList loadMinimalValueList() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "ValueList",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("ValueList",container);
        }  // public static loadMinimalValueList

        public static LangStringPreferredNameTypeIec61360 loadMaximalLangStringPreferredNameTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringPreferredNameTypeIec61360",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringPreferredNameTypeIec61360",container);
        }  // public static loadMaximalLangStringPreferredNameTypeIec61360

        public static LangStringPreferredNameTypeIec61360 loadMinimalLangStringPreferredNameTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringPreferredNameTypeIec61360",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringPreferredNameTypeIec61360",container);
        }  // public static loadMinimalLangStringPreferredNameTypeIec61360

        public static LangStringShortNameTypeIec61360 loadMaximalLangStringShortNameTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringShortNameTypeIec61360",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringShortNameTypeIec61360",container);
        }  // public static loadMaximalLangStringShortNameTypeIec61360

        public static LangStringShortNameTypeIec61360 loadMinimalLangStringShortNameTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringShortNameTypeIec61360",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringShortNameTypeIec61360",container);
        }  // public static loadMinimalLangStringShortNameTypeIec61360

        public static LangStringDefinitionTypeIec61360 loadMaximalLangStringDefinitionTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringDefinitionTypeIec61360",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringDefinitionTypeIec61360",container);
        }  // public static loadMaximalLangStringDefinitionTypeIec61360

        public static LangStringDefinitionTypeIec61360 loadMinimalLangStringDefinitionTypeIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "LangStringDefinitionTypeIec61360",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("LangStringDefinitionTypeIec61360",container);
        }  // public static loadMinimalLangStringDefinitionTypeIec61360

        public static DataSpecificationIec61360 loadMaximalDataSpecificationIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "DataSpecificationIec61360",
                "maximal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("DataSpecificationIec61360",container);
        }  // public static loadMaximalDataSpecificationIec61360

        public static DataSpecificationIec61360 loadMinimalDataSpecificationIec61360() throws IOException {
            final Path path = Paths.get(Common.TEST_DATA_DIR,
                "Json",
                "ContainedInEnvironment",
                "Expected",
                "DataSpecificationIec61360",
                "minimal.json");
            final ObjectMapper objectMapper = new ObjectMapper();
            final JsonNode node = objectMapper.readTree(path.toFile());
            final Environment container = Jsonization.Deserialize.deserializeEnvironment(node);
            return Common.mustFind("DataSpecificationIec61360",container);
        }  // public static loadMinimalDataSpecificationIec61360
}  // class CommonJsonization


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
