/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import aas_core.aas3_0.reporting.Reporting;
import aas_core.aas3_0.types.enums.*;
import aas_core.aas3_0.verification.Verification;
import org.junit.jupiter.api.Test;
import javax.annotation.Generated;
import java.util.List;
import java.util.stream.Collectors;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Generated("Generated by aas-test-gen")
public class TestVerificationOfEnums {
        @Test
        public void testModellingKindValid() {
          final List<Reporting.Error> errors = Verification.verifyModellingKind(ModellingKind.TEMPLATE).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testModellingKindValid

        @Test
        public void testModellingKindInvalid() {
          final ModellingKind value = null;
          final List<Reporting.Error> errors = Verification.verifyModellingKind(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid ModellingKind: null", errors.get(0).getCause());
        }  // void testModellingKindInvalid

        @Test
        public void testQualifierKindValid() {
          final List<Reporting.Error> errors = Verification.verifyQualifierKind(QualifierKind.VALUE_QUALIFIER).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testQualifierKindValid

        @Test
        public void testQualifierKindInvalid() {
          final QualifierKind value = null;
          final List<Reporting.Error> errors = Verification.verifyQualifierKind(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid QualifierKind: null", errors.get(0).getCause());
        }  // void testQualifierKindInvalid

        @Test
        public void testAssetKindValid() {
          final List<Reporting.Error> errors = Verification.verifyAssetKind(AssetKind.TYPE).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testAssetKindValid

        @Test
        public void testAssetKindInvalid() {
          final AssetKind value = null;
          final List<Reporting.Error> errors = Verification.verifyAssetKind(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid AssetKind: null", errors.get(0).getCause());
        }  // void testAssetKindInvalid

        @Test
        public void testAasSubmodelElementsValid() {
          final List<Reporting.Error> errors = Verification.verifyAasSubmodelElements(AasSubmodelElements.ANNOTATED_RELATIONSHIP_ELEMENT).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testAasSubmodelElementsValid

        @Test
        public void testAasSubmodelElementsInvalid() {
          final AasSubmodelElements value = null;
          final List<Reporting.Error> errors = Verification.verifyAasSubmodelElements(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid AasSubmodelElements: null", errors.get(0).getCause());
        }  // void testAasSubmodelElementsInvalid

        @Test
        public void testEntityTypeValid() {
          final List<Reporting.Error> errors = Verification.verifyEntityType(EntityType.CO_MANAGED_ENTITY).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testEntityTypeValid

        @Test
        public void testEntityTypeInvalid() {
          final EntityType value = null;
          final List<Reporting.Error> errors = Verification.verifyEntityType(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid EntityType: null", errors.get(0).getCause());
        }  // void testEntityTypeInvalid

        @Test
        public void testDirectionValid() {
          final List<Reporting.Error> errors = Verification.verifyDirection(Direction.INPUT).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testDirectionValid

        @Test
        public void testDirectionInvalid() {
          final Direction value = null;
          final List<Reporting.Error> errors = Verification.verifyDirection(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid Direction: null", errors.get(0).getCause());
        }  // void testDirectionInvalid

        @Test
        public void testStateOfEventValid() {
          final List<Reporting.Error> errors = Verification.verifyStateOfEvent(StateOfEvent.ON).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testStateOfEventValid

        @Test
        public void testStateOfEventInvalid() {
          final StateOfEvent value = null;
          final List<Reporting.Error> errors = Verification.verifyStateOfEvent(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid StateOfEvent: null", errors.get(0).getCause());
        }  // void testStateOfEventInvalid

        @Test
        public void testReferenceTypesValid() {
          final List<Reporting.Error> errors = Verification.verifyReferenceTypes(ReferenceTypes.EXTERNAL_REFERENCE).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testReferenceTypesValid

        @Test
        public void testReferenceTypesInvalid() {
          final ReferenceTypes value = null;
          final List<Reporting.Error> errors = Verification.verifyReferenceTypes(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid ReferenceTypes: null", errors.get(0).getCause());
        }  // void testReferenceTypesInvalid

        @Test
        public void testKeyTypesValid() {
          final List<Reporting.Error> errors = Verification.verifyKeyTypes(KeyTypes.ANNOTATED_RELATIONSHIP_ELEMENT).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testKeyTypesValid

        @Test
        public void testKeyTypesInvalid() {
          final KeyTypes value = null;
          final List<Reporting.Error> errors = Verification.verifyKeyTypes(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid KeyTypes: null", errors.get(0).getCause());
        }  // void testKeyTypesInvalid

        @Test
        public void testDataTypeDefXsdValid() {
          final List<Reporting.Error> errors = Verification.verifyDataTypeDefXsd(DataTypeDefXsd.ANY_URI).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testDataTypeDefXsdValid

        @Test
        public void testDataTypeDefXsdInvalid() {
          final DataTypeDefXsd value = null;
          final List<Reporting.Error> errors = Verification.verifyDataTypeDefXsd(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid DataTypeDefXsd: null", errors.get(0).getCause());
        }  // void testDataTypeDefXsdInvalid

        @Test
        public void testDataTypeIec61360Valid() {
          final List<Reporting.Error> errors = Verification.verifyDataTypeIec61360(DataTypeIec61360.DATE).collect(Collectors.toList());
          assertTrue(errors.isEmpty());
        }  // void testDataTypeIec61360Valid

        @Test
        public void testDataTypeIec61360Invalid() {
          final DataTypeIec61360 value = null;
          final List<Reporting.Error> errors = Verification.verifyDataTypeIec61360(value).collect(Collectors.toList());
          assertEquals(1,errors.size());
          assertEquals("Invalid DataTypeIec61360: null", errors.get(0).getCause());
        }  // void testDataTypeIec61360Invalid
}  // class TestVerificationOfEnums


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
