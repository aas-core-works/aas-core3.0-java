/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
 
import aas_core.aas3_0.jsonization.Jsonization;
import aas_core.aas3_0.types.impl.*;
import aas_core.aas3_0.types.model.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import javax.annotation.Generated;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

@Generated("Generated by aas-test-gen")
public class TestJsonizationOfInterfaces {

        final static ObjectMapper mapper = new ObjectMapper();

        @Test
        public void testRoundTripIHasSemanticsFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromRelationshipElement

        @Test
        public void testRoundTripIHasSemanticsFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIHasSemanticsFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromBasicEventElement

        @Test
        public void testRoundTripIHasSemanticsFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromBlob

        @Test
        public void testRoundTripIHasSemanticsFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromCapability

        @Test
        public void testRoundTripIHasSemanticsFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromEntity

        @Test
        public void testRoundTripIHasSemanticsFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromFile

        @Test
        public void testRoundTripIHasSemanticsFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromMultiLanguageProperty

        @Test
        public void testRoundTripIHasSemanticsFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromOperation

        @Test
        public void testRoundTripIHasSemanticsFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromProperty

        @Test
        public void testRoundTripIHasSemanticsFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromRange

        @Test
        public void testRoundTripIHasSemanticsFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromReferenceElement

        @Test
        public void testRoundTripIHasSemanticsFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromSubmodel

        @Test
        public void testRoundTripIHasSemanticsFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromSubmodelElementCollection

        @Test
        public void testRoundTripIHasSemanticsFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasSemantics anotherInstance = Jsonization.Deserialize.deserializeIHasSemantics(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasSemanticsFromSubmodelElementList

        @Test
        public void testRoundTripIHasExtensionsFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromRelationshipElement

        @Test
        public void testRoundTripIHasExtensionsFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIHasExtensionsFromAssetAdministrationShell() throws IOException {
          final AssetAdministrationShell instance = CommonJsonization.loadMaximalAssetAdministrationShell();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromAssetAdministrationShell

        @Test
        public void testRoundTripIHasExtensionsFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromBasicEventElement

        @Test
        public void testRoundTripIHasExtensionsFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromBlob

        @Test
        public void testRoundTripIHasExtensionsFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromCapability

        @Test
        public void testRoundTripIHasExtensionsFromConceptDescription() throws IOException {
          final ConceptDescription instance = CommonJsonization.loadMaximalConceptDescription();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromConceptDescription

        @Test
        public void testRoundTripIHasExtensionsFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromEntity

        @Test
        public void testRoundTripIHasExtensionsFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromFile

        @Test
        public void testRoundTripIHasExtensionsFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromMultiLanguageProperty

        @Test
        public void testRoundTripIHasExtensionsFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromOperation

        @Test
        public void testRoundTripIHasExtensionsFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromProperty

        @Test
        public void testRoundTripIHasExtensionsFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromRange

        @Test
        public void testRoundTripIHasExtensionsFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromReferenceElement

        @Test
        public void testRoundTripIHasExtensionsFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromSubmodel

        @Test
        public void testRoundTripIHasExtensionsFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromSubmodelElementCollection

        @Test
        public void testRoundTripIHasExtensionsFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasExtensions anotherInstance = Jsonization.Deserialize.deserializeIHasExtensions(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasExtensionsFromSubmodelElementList

        @Test
        public void testRoundTripIReferableFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromRelationshipElement

        @Test
        public void testRoundTripIReferableFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIReferableFromAssetAdministrationShell() throws IOException {
          final AssetAdministrationShell instance = CommonJsonization.loadMaximalAssetAdministrationShell();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromAssetAdministrationShell

        @Test
        public void testRoundTripIReferableFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromBasicEventElement

        @Test
        public void testRoundTripIReferableFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromBlob

        @Test
        public void testRoundTripIReferableFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromCapability

        @Test
        public void testRoundTripIReferableFromConceptDescription() throws IOException {
          final ConceptDescription instance = CommonJsonization.loadMaximalConceptDescription();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromConceptDescription

        @Test
        public void testRoundTripIReferableFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromEntity

        @Test
        public void testRoundTripIReferableFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromFile

        @Test
        public void testRoundTripIReferableFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromMultiLanguageProperty

        @Test
        public void testRoundTripIReferableFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromOperation

        @Test
        public void testRoundTripIReferableFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromProperty

        @Test
        public void testRoundTripIReferableFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromRange

        @Test
        public void testRoundTripIReferableFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromReferenceElement

        @Test
        public void testRoundTripIReferableFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromSubmodel

        @Test
        public void testRoundTripIReferableFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromSubmodelElementCollection

        @Test
        public void testRoundTripIReferableFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IReferable anotherInstance = Jsonization.Deserialize.deserializeIReferable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIReferableFromSubmodelElementList

        @Test
        public void testRoundTripIIdentifiableFromAssetAdministrationShell() throws IOException {
          final AssetAdministrationShell instance = CommonJsonization.loadMaximalAssetAdministrationShell();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IIdentifiable anotherInstance = Jsonization.Deserialize.deserializeIIdentifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIIdentifiableFromAssetAdministrationShell

        @Test
        public void testRoundTripIIdentifiableFromConceptDescription() throws IOException {
          final ConceptDescription instance = CommonJsonization.loadMaximalConceptDescription();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IIdentifiable anotherInstance = Jsonization.Deserialize.deserializeIIdentifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIIdentifiableFromConceptDescription

        @Test
        public void testRoundTripIIdentifiableFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IIdentifiable anotherInstance = Jsonization.Deserialize.deserializeIIdentifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIIdentifiableFromSubmodel

        @Test
        public void testRoundTripIHasKindFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasKind anotherInstance = Jsonization.Deserialize.deserializeIHasKind(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasKindFromSubmodel

        @Test
        public void testRoundTripIHasDataSpecificationFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromRelationshipElement

        @Test
        public void testRoundTripIHasDataSpecificationFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIHasDataSpecificationFromAssetAdministrationShell() throws IOException {
          final AssetAdministrationShell instance = CommonJsonization.loadMaximalAssetAdministrationShell();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromAssetAdministrationShell

        @Test
        public void testRoundTripIHasDataSpecificationFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromBasicEventElement

        @Test
        public void testRoundTripIHasDataSpecificationFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromBlob

        @Test
        public void testRoundTripIHasDataSpecificationFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromCapability

        @Test
        public void testRoundTripIHasDataSpecificationFromConceptDescription() throws IOException {
          final ConceptDescription instance = CommonJsonization.loadMaximalConceptDescription();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromConceptDescription

        @Test
        public void testRoundTripIHasDataSpecificationFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromEntity

        @Test
        public void testRoundTripIHasDataSpecificationFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromFile

        @Test
        public void testRoundTripIHasDataSpecificationFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromMultiLanguageProperty

        @Test
        public void testRoundTripIHasDataSpecificationFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromOperation

        @Test
        public void testRoundTripIHasDataSpecificationFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromProperty

        @Test
        public void testRoundTripIHasDataSpecificationFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromRange

        @Test
        public void testRoundTripIHasDataSpecificationFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromReferenceElement

        @Test
        public void testRoundTripIHasDataSpecificationFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromSubmodel

        @Test
        public void testRoundTripIHasDataSpecificationFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromSubmodelElementCollection

        @Test
        public void testRoundTripIHasDataSpecificationFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IHasDataSpecification anotherInstance = Jsonization.Deserialize.deserializeIHasDataSpecification(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIHasDataSpecificationFromSubmodelElementList

        @Test
        public void testRoundTripIQualifiableFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromRelationshipElement

        @Test
        public void testRoundTripIQualifiableFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIQualifiableFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromBasicEventElement

        @Test
        public void testRoundTripIQualifiableFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromBlob

        @Test
        public void testRoundTripIQualifiableFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromCapability

        @Test
        public void testRoundTripIQualifiableFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromEntity

        @Test
        public void testRoundTripIQualifiableFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromFile

        @Test
        public void testRoundTripIQualifiableFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromMultiLanguageProperty

        @Test
        public void testRoundTripIQualifiableFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromOperation

        @Test
        public void testRoundTripIQualifiableFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromProperty

        @Test
        public void testRoundTripIQualifiableFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromRange

        @Test
        public void testRoundTripIQualifiableFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromReferenceElement

        @Test
        public void testRoundTripIQualifiableFromSubmodel() throws IOException {
          final Submodel instance = CommonJsonization.loadMaximalSubmodel();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromSubmodel

        @Test
        public void testRoundTripIQualifiableFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromSubmodelElementCollection

        @Test
        public void testRoundTripIQualifiableFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IQualifiable anotherInstance = Jsonization.Deserialize.deserializeIQualifiable(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIQualifiableFromSubmodelElementList

        @Test
        public void testRoundTripISubmodelElementFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromRelationshipElement

        @Test
        public void testRoundTripISubmodelElementFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripISubmodelElementFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromBasicEventElement

        @Test
        public void testRoundTripISubmodelElementFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromBlob

        @Test
        public void testRoundTripISubmodelElementFromCapability() throws IOException {
          final Capability instance = CommonJsonization.loadMaximalCapability();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromCapability

        @Test
        public void testRoundTripISubmodelElementFromEntity() throws IOException {
          final Entity instance = CommonJsonization.loadMaximalEntity();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromEntity

        @Test
        public void testRoundTripISubmodelElementFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromFile

        @Test
        public void testRoundTripISubmodelElementFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromMultiLanguageProperty

        @Test
        public void testRoundTripISubmodelElementFromOperation() throws IOException {
          final Operation instance = CommonJsonization.loadMaximalOperation();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromOperation

        @Test
        public void testRoundTripISubmodelElementFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromProperty

        @Test
        public void testRoundTripISubmodelElementFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromRange

        @Test
        public void testRoundTripISubmodelElementFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromReferenceElement

        @Test
        public void testRoundTripISubmodelElementFromSubmodelElementCollection() throws IOException {
          final SubmodelElementCollection instance = CommonJsonization.loadMaximalSubmodelElementCollection();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromSubmodelElementCollection

        @Test
        public void testRoundTripISubmodelElementFromSubmodelElementList() throws IOException {
          final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final ISubmodelElement anotherInstance = Jsonization.Deserialize.deserializeISubmodelElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripISubmodelElementFromSubmodelElementList

        @Test
        public void testRoundTripIRelationshipElementFromAnnotatedRelationshipElement() throws IOException {
          final AnnotatedRelationshipElement instance = CommonJsonization.loadMaximalAnnotatedRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IRelationshipElement anotherInstance = Jsonization.Deserialize.deserializeIRelationshipElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIRelationshipElementFromAnnotatedRelationshipElement

        @Test
        public void testRoundTripIRelationshipElementFromRelationshipElement() throws IOException {
          final RelationshipElement instance = CommonJsonization.loadMaximalRelationshipElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IRelationshipElement anotherInstance = Jsonization.Deserialize.deserializeIRelationshipElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIRelationshipElementFromRelationshipElement

        @Test
        public void testRoundTripIDataElementFromBlob() throws IOException {
          final Blob instance = CommonJsonization.loadMaximalBlob();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromBlob

        @Test
        public void testRoundTripIDataElementFromFile() throws IOException {
          final File instance = CommonJsonization.loadMaximalFile();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromFile

        @Test
        public void testRoundTripIDataElementFromMultiLanguageProperty() throws IOException {
          final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromMultiLanguageProperty

        @Test
        public void testRoundTripIDataElementFromProperty() throws IOException {
          final Property instance = CommonJsonization.loadMaximalProperty();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromProperty

        @Test
        public void testRoundTripIDataElementFromRange() throws IOException {
          final Range instance = CommonJsonization.loadMaximalRange();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromRange

        @Test
        public void testRoundTripIDataElementFromReferenceElement() throws IOException {
          final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataElement anotherInstance = Jsonization.Deserialize.deserializeIDataElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataElementFromReferenceElement

        @Test
        public void testRoundTripIEventElementFromBasicEventElement() throws IOException {
          final BasicEventElement instance = CommonJsonization.loadMaximalBasicEventElement();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IEventElement anotherInstance = Jsonization.Deserialize.deserializeIEventElement(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIEventElementFromBasicEventElement

        @Test
        public void testRoundTripIDataSpecificationContentFromDataSpecificationIec61360() throws IOException {
          final DataSpecificationIec61360 instance = CommonJsonization.loadMaximalDataSpecificationIec61360();
          final JsonNode jsonObject = Jsonization.Serialize.toJsonObject(instance);
          final IDataSpecificationContent anotherInstance = Jsonization.Deserialize.deserializeIDataSpecificationContent(jsonObject);
          final JsonNode anotherJsonObject = Jsonization.Serialize.toJsonObject(anotherInstance);
          assertEquals(mapper.readTree(jsonObject.toString()), mapper.readTree(anotherJsonObject.toString()));
        }  // void testRoundTripIDataSpecificationContentFromDataSpecificationIec61360
}  // class TestJsonizationOfInterfaces


/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
