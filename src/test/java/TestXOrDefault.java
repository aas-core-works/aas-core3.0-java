/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import static org.junit.jupiter.api.Assertions.assertEquals;

import aas_core.aas3_0.stringification.Stringification;
import aas_core.aas3_0.types.impl.*;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;
import org.junit.jupiter.api.Test;

public class TestXOrDefault {

  static final ObjectMapper mapper = new ObjectMapper();

  public static void compareOrRerecordValue(Object value, Path expectedPath) throws IOException {
    final JsonNode got = mapper.readTree("\"" + value + "\"");
    if (Common.RECORD_MODE) {
      Files.createDirectories(expectedPath.getParent());
      Files.write(expectedPath, got.toString().getBytes());
    } else {
      if (!Files.exists(expectedPath)) {
        throw new FileNotFoundException(
            "The file with the recorded value does not exist: "
                + expectedPath
                + "; maybe you want to set the environment variable "
                + "AAS_CORE_AAS3_0_TESTS_RECORD_MODE");
      }
      final JsonNode expected = mapper.readTree(expectedPath.toFile());
      assertEquals(mapper.readTree(expected.toString()), mapper.readTree(got.toString()));
    }
  }

  @Test
  public void testExtensionvalueTypeOrDefaultNonDefault() throws IOException {
    final Extension instance = CommonJsonization.loadMaximalExtension();
    final Optional<String> valueOpt = Stringification.toString(instance.valueTypeOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "Extension",
            "valueTypeOrDefault.non-default.json"));
  } // public void testExtensionvalueTypeOrDefaultNonDefault

  @Test
  public void testExtension_valueTypeOrDefaultDefault() throws IOException {
    final Extension instance = CommonJsonization.loadMinimalExtension();
    final Optional<String> valueOpt = Stringification.toString(instance.valueTypeOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Extension", "valueTypeOrDefault.default.json"));
  } // public void testExtensionvalueTypeOrDefaultDefault

  @Test
  public void testQualifierkindOrDefaultNonDefault() throws IOException {
    final Qualifier instance = CommonJsonization.loadMaximalQualifier();
    final Optional<String> valueOpt = Stringification.toString(instance.kindOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Qualifier", "kindOrDefault.non-default.json"));
  } // public void testQualifierkindOrDefaultNonDefault

  @Test
  public void testQualifier_kindOrDefaultDefault() throws IOException {
    final Qualifier instance = CommonJsonization.loadMinimalQualifier();
    final Optional<String> valueOpt = Stringification.toString(instance.kindOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(Common.TEST_DATA_DIR, "XOrDefault", "Qualifier", "kindOrDefault.default.json"));
  } // public void testQualifierkindOrDefaultDefault

  @Test
  public void testSubmodelkindOrDefaultNonDefault() throws IOException {
    final Submodel instance = CommonJsonization.loadMaximalSubmodel();
    final Optional<String> valueOpt = Stringification.toString(instance.kindOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Submodel", "kindOrDefault.non-default.json"));
  } // public void testSubmodelkindOrDefaultNonDefault

  @Test
  public void testSubmodel_kindOrDefaultDefault() throws IOException {
    final Submodel instance = CommonJsonization.loadMinimalSubmodel();
    final Optional<String> valueOpt = Stringification.toString(instance.kindOrDefault());
    if (!valueOpt.isPresent()) throw new IllegalStateException("Failed to stringify the enum");
    String value = valueOpt.get();
    compareOrRerecordValue(
        value,
        Paths.get(Common.TEST_DATA_DIR, "XOrDefault", "Submodel", "kindOrDefault.default.json"));
  } // public void testSubmodelkindOrDefaultDefault

  @Test
  public void testSubmodelElementListorderRelevantOrDefaultNonDefault() throws IOException {
    final SubmodelElementList instance = CommonJsonization.loadMaximalSubmodelElementList();
    final Object value = instance.orderRelevantOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "SubmodelElementList",
            "orderRelevantOrDefault.non-default.json"));
  } // public void testSubmodelElementListorderRelevantOrDefaultNonDefault

  @Test
  public void testSubmodelElementList_orderRelevantOrDefaultDefault() throws IOException {
    final SubmodelElementList instance = CommonJsonization.loadMinimalSubmodelElementList();
    final Object value = instance.orderRelevantOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "SubmodelElementList",
            "orderRelevantOrDefault.default.json"));
  } // public void testSubmodelElementListorderRelevantOrDefaultDefault

  @Test
  public void testPropertycategoryOrDefaultNonDefault() throws IOException {
    final Property instance = CommonJsonization.loadMaximalProperty();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Property", "categoryOrDefault.non-default.json"));
  } // public void testPropertycategoryOrDefaultNonDefault

  @Test
  public void testProperty_categoryOrDefaultDefault() throws IOException {
    final Property instance = CommonJsonization.loadMinimalProperty();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Property", "categoryOrDefault.default.json"));
  } // public void testPropertycategoryOrDefaultDefault

  @Test
  public void testMultiLanguagePropertycategoryOrDefaultNonDefault() throws IOException {
    final MultiLanguageProperty instance = CommonJsonization.loadMaximalMultiLanguageProperty();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "MultiLanguageProperty",
            "categoryOrDefault.non-default.json"));
  } // public void testMultiLanguagePropertycategoryOrDefaultNonDefault

  @Test
  public void testMultiLanguageProperty_categoryOrDefaultDefault() throws IOException {
    final MultiLanguageProperty instance = CommonJsonization.loadMinimalMultiLanguageProperty();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "MultiLanguageProperty",
            "categoryOrDefault.default.json"));
  } // public void testMultiLanguagePropertycategoryOrDefaultDefault

  @Test
  public void testRangecategoryOrDefaultNonDefault() throws IOException {
    final Range instance = CommonJsonization.loadMaximalRange();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Range", "categoryOrDefault.non-default.json"));
  } // public void testRangecategoryOrDefaultNonDefault

  @Test
  public void testRange_categoryOrDefaultDefault() throws IOException {
    final Range instance = CommonJsonization.loadMinimalRange();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(Common.TEST_DATA_DIR, "XOrDefault", "Range", "categoryOrDefault.default.json"));
  } // public void testRangecategoryOrDefaultDefault

  @Test
  public void testReferenceElementcategoryOrDefaultNonDefault() throws IOException {
    final ReferenceElement instance = CommonJsonization.loadMaximalReferenceElement();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "ReferenceElement",
            "categoryOrDefault.non-default.json"));
  } // public void testReferenceElementcategoryOrDefaultNonDefault

  @Test
  public void testReferenceElement_categoryOrDefaultDefault() throws IOException {
    final ReferenceElement instance = CommonJsonization.loadMinimalReferenceElement();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR,
            "XOrDefault",
            "ReferenceElement",
            "categoryOrDefault.default.json"));
  } // public void testReferenceElementcategoryOrDefaultDefault

  @Test
  public void testBlobcategoryOrDefaultNonDefault() throws IOException {
    final Blob instance = CommonJsonization.loadMaximalBlob();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "Blob", "categoryOrDefault.non-default.json"));
  } // public void testBlobcategoryOrDefaultNonDefault

  @Test
  public void testBlob_categoryOrDefaultDefault() throws IOException {
    final Blob instance = CommonJsonization.loadMinimalBlob();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(Common.TEST_DATA_DIR, "XOrDefault", "Blob", "categoryOrDefault.default.json"));
  } // public void testBlobcategoryOrDefaultDefault

  @Test
  public void testFilecategoryOrDefaultNonDefault() throws IOException {
    final File instance = CommonJsonization.loadMaximalFile();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(
            Common.TEST_DATA_DIR, "XOrDefault", "File", "categoryOrDefault.non-default.json"));
  } // public void testFilecategoryOrDefaultNonDefault

  @Test
  public void testFile_categoryOrDefaultDefault() throws IOException {
    final File instance = CommonJsonization.loadMinimalFile();
    final Object value = instance.categoryOrDefault();
    compareOrRerecordValue(
        value,
        Paths.get(Common.TEST_DATA_DIR, "XOrDefault", "File", "categoryOrDefault.default.json"));
  } // public void testFilecategoryOrDefaultDefault
} // class TestXOrDefault

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
