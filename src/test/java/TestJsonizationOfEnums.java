/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */

import aas_core.aas3_0.jsonization.Jsonization;
import aas_core.aas3_0.types.enums.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import javax.annotation.Generated;
import static org.junit.jupiter.api.Assertions.assertEquals;


@Generated("Generated by aas-test-gen")
public class TestJsonizationOfEnums {

        final static ObjectMapper mapper = new ObjectMapper();

        @Test
        public void testRoundTripModellingKind() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"Template\"");
          final ModellingKind parsed = Jsonization.Deserialize.deserializeModellingKind(node);
          final JsonNode serialized = Jsonization.Serialize.modellingKindToJsonValue(parsed);
          assertEquals("\"Template\"", serialized.toString());
        }  // void Test_round_trip_ModellingKind

        @Test
        public void testRoundTripQualifierKind() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"ValueQualifier\"");
          final QualifierKind parsed = Jsonization.Deserialize.deserializeQualifierKind(node);
          final JsonNode serialized = Jsonization.Serialize.qualifierKindToJsonValue(parsed);
          assertEquals("\"ValueQualifier\"", serialized.toString());
        }  // void Test_round_trip_QualifierKind

        @Test
        public void testRoundTripAssetKind() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"Type\"");
          final AssetKind parsed = Jsonization.Deserialize.deserializeAssetKind(node);
          final JsonNode serialized = Jsonization.Serialize.assetKindToJsonValue(parsed);
          assertEquals("\"Type\"", serialized.toString());
        }  // void Test_round_trip_AssetKind

        @Test
        public void testRoundTripAasSubmodelElements() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"AnnotatedRelationshipElement\"");
          final AasSubmodelElements parsed = Jsonization.Deserialize.deserializeAasSubmodelElements(node);
          final JsonNode serialized = Jsonization.Serialize.aasSubmodelElementsToJsonValue(parsed);
          assertEquals("\"AnnotatedRelationshipElement\"", serialized.toString());
        }  // void Test_round_trip_AasSubmodelElements

        @Test
        public void testRoundTripEntityType() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"CoManagedEntity\"");
          final EntityType parsed = Jsonization.Deserialize.deserializeEntityType(node);
          final JsonNode serialized = Jsonization.Serialize.entityTypeToJsonValue(parsed);
          assertEquals("\"CoManagedEntity\"", serialized.toString());
        }  // void Test_round_trip_EntityType

        @Test
        public void testRoundTripDirection() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"input\"");
          final Direction parsed = Jsonization.Deserialize.deserializeDirection(node);
          final JsonNode serialized = Jsonization.Serialize.directionToJsonValue(parsed);
          assertEquals("\"input\"", serialized.toString());
        }  // void Test_round_trip_Direction

        @Test
        public void testRoundTripStateOfEvent() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"on\"");
          final StateOfEvent parsed = Jsonization.Deserialize.deserializeStateOfEvent(node);
          final JsonNode serialized = Jsonization.Serialize.stateOfEventToJsonValue(parsed);
          assertEquals("\"on\"", serialized.toString());
        }  // void Test_round_trip_StateOfEvent

        @Test
        public void testRoundTripReferenceTypes() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"ExternalReference\"");
          final ReferenceTypes parsed = Jsonization.Deserialize.deserializeReferenceTypes(node);
          final JsonNode serialized = Jsonization.Serialize.referenceTypesToJsonValue(parsed);
          assertEquals("\"ExternalReference\"", serialized.toString());
        }  // void Test_round_trip_ReferenceTypes

        @Test
        public void testRoundTripKeyTypes() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"AnnotatedRelationshipElement\"");
          final KeyTypes parsed = Jsonization.Deserialize.deserializeKeyTypes(node);
          final JsonNode serialized = Jsonization.Serialize.keyTypesToJsonValue(parsed);
          assertEquals("\"AnnotatedRelationshipElement\"", serialized.toString());
        }  // void Test_round_trip_KeyTypes

        @Test
        public void testRoundTripDataTypeDefXsd() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"xs:anyURI\"");
          final DataTypeDefXsd parsed = Jsonization.Deserialize.deserializeDataTypeDefXsd(node);
          final JsonNode serialized = Jsonization.Serialize.dataTypeDefXsdToJsonValue(parsed);
          assertEquals("\"xs:anyURI\"", serialized.toString());
        }  // void Test_round_trip_DataTypeDefXsd

        @Test
        public void testRoundTripDataTypeIec61360() throws JsonProcessingException {
          final JsonNode node = mapper.readTree("\"DATE\"");
          final DataTypeIec61360 parsed = Jsonization.Deserialize.deserializeDataTypeIec61360(node);
          final JsonNode serialized = Jsonization.Serialize.dataTypeIec61360ToJsonValue(parsed);
          assertEquals("\"DATE\"", serialized.toString());
        }  // void Test_round_trip_DataTypeIec61360
}  // class TestJsonizationOfEnums

/*
 * This code has been automatically generated by testgen.
 * Do NOT edit or append.
 */
